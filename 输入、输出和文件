缓冲区是用作中介的内存块
flushing the buffer 刷新缓冲区
streambuf类 为缓冲区提供内存，提供各种类方法
ios_base->ios->(ostream, istream)->iostream
错误流cerr，clog
重定向
通常，缓冲区为512字节或其整数倍

cout
  其他ostream方法：put()字符,write()字符串
  控制符flush刷新缓冲区，endl刷新缓冲区，并插入一个换行符
  浮点类型被显示为6位，末尾0不显示
  
  修改计数系统
    cout << hex;
  调整字段宽度
    int witdth();//返回当前宽度
    int witdth(int i);//设置
  填充字符
    cout.fill('*');
  设置浮点显示精度
    cout.percision(2);
  打印小数点和末尾0
    cout.self(ios_base::showpoint);
  
  
  set()
    fmtflag setf(fmtflags);
      设置单个位控制的格式信息
      返回值，指出所有标记以前的设置
      
      ios_base::boolalpha // 输入输出bool
      ios_base::showbase  // 对于输出， 使用C++基数前缀（0,0x）
      ios_base::showpoint
      ios_base::uppercase // 对于16进制输出，使用大写字母，E表示法
      ios_base::showpos   //显示+
      
    fmtflag setf(fmtflag, fmtflag);
      第二参数               第一参数               含义
      ios_bas::basefield    ios_base::dec         使用基数10
      ios_bas::basefield    ios_base::oct         使用基数8
      ios_bas::basefield    ios_base::hex         使用基数16
      
      ios_base::floatfield  ios_base::fixed       使用定点计数法
      ios_base::floatfield  ios_base::scientific  使用科学计数法
      
      ios_base::adjustfield ios_base::left        左对齐
      iOS_base::adjustfield ios_base::right       右对齐
      ios_base::adjustfield ios_base::internal    符号或基数前缀左对齐，值右对齐
      
      定点表示法和科学计数法都有以下两个特征
        精度指的是小数位数
        显示末尾的零
      
      ios_base::fmtflags old = cout.setf(ios::left, ios::adjustfield);
      out.setf(old, ios::adjustfield);
      
      cout.unself(ios_base::floatfield); //恢复默认状态
      
    标准控制符，使用cout调用setf（）
    
    #include <iomanip>
      setprecision()
      setfill()
      setw()
      它们是控制符，可直接与cout连用
      
cin
  控制符hex,oct和dec可以和cin一起使用
  cin>>跳过空白（空格，换行，制表符）
  
  状态流（定义为iostate类型），由3个ios_base元素组成：eofbit，badbit，failbit
    成员：
    eofbit
    badbit
    failbit
    goodbit
    good()
    eof()
    bad()
    fail()
    rdstate()
    exceptions()
    exceptions(iostate ex)
    clear(iostate s)
    setstate(iostate s)
  
  其他istream类方法
    非格式化输入函数
      get（char&）和get(void)提供不挑锅空白的单字符输入功能
      get（char*,int,char)和getline(char*,int,char)
      ignore(读取的最大字符数，分解符)
    
    read()
      char gross[144];
      cin.read(gross, 144);
      不会在输入后加空值字符，不能将输入转为字符串
      常与write()一起使用，完成文件输入和输出
      返回类型为istream &
    peek()
      返回输入中的下一个字符，但不会抽取输入流中的字符，查看
    gcount()
      返回最后一个非格式化抽取方法读取的字符数
    putback()
     将一个字符插入到输入字符串中，被插入的字符将是下一条输入语句读取的第一个字符
     返回类型是istream &
    
文件输入和输出
  流状态检查： is_open()
  
  命令行处理技术
  int main(int argc, char * argv[])
    argc:参数个数，包括命令名本身
    argv:指向命令函参数的指针
    如对于命令行：wc report1 report2 report3
    则argc = 4,argv[0] = wc, argv[1] = report1,...
  
  文件模式
  
  随机存取
    seekg()
    seekp()
    参数：streamoff，streampos
  
  临时文件
    char * tmpnam(char * pszName);
  
  内核格式化
    读取string对象中的格式化信息或将格式化信息写入string对象中
    
