原文：http://blog.csdn.NET/cxf7394373/article/details/7195661

原文：http://qiaoxinwang.blog.163.com/blog/static/86096452010612139172/

头文件：#include<io.h>

[html] view plain copy
char * filePath = "D:\\sample";  
[html] view plain copy
vector<string> files;  
  
////获取该路径下的所有文件  
getFiles(filePath, files );  
  
char str[30];  
int size = files.size();  
for (int i = 0;i < size;i++)  
{  
    cout<<files[i].c_str()<<endl;  
}  

[html] view plain copy
void getFiles( string path, vector<string>& files )  
{  
    //文件句柄  
    long   hFile   =   0;  
    //文件信息  
    struct _finddata_t fileinfo;  
    string p;  
    if((hFile = _findfirst(p.assign(path).append("\\*").c_str(),&fileinfo)) !=  -1)  
    {  
        do  
        {  
            //如果是目录,迭代之  
            //如果不是,加入列表  
            if((fileinfo.attrib &  _A_SUBDIR))  
            {  
                if(strcmp(fileinfo.name,".") != 0  &&  strcmp(fileinfo.name,"..") != 0)  
                    getFiles( p.assign(path).append("\\").append(fileinfo.name), files );  
            }  
            else  
            {  
                files.push_back(p.assign(path).append("\\").append(fileinfo.name) ); //将文件路径保存，也可以只保存文件名:  
                                                                                    //files.push_back(p.assign(fileinfo.name) );  
            }  
        }while(_findnext(hFile, &fileinfo)  == 0);  
        _findclose(hFile);  
    }  
}  

_finddata_t 的使用  


那么到底如何查找文件呢？我们需要一个结构体和几个大家可能不太熟悉的函数。这些函数和结构体在<io.h>的头文件中，结构体为struct _finddata_t ，
函数为_findfirst、_findnext和_fineclose。具体如何使用，我会慢慢讲来～
        首先讲这个结构体吧～ struct _finddata_t ，这个结构体是用来存储文件各种信息的。
        说实话，这个结构体的具体定义代码，我没有找到，不过还好，文档里面在_find里有比较详细的成员变量介绍。我基本上就把文档翻译过来讲吧：


        unsigned atrrib：文件属性的存储位置。它存储一个unsigned单元，用于表示文件的属性。
        文件属性是用位表示的，
        主要有以下一些：_A_ARCH（存档）、_A_HIDDEN（隐藏）、_A_NORMAL（正常）、_A_RDONLY（只读）、_A_SUBDIR（文件夹）、_A_SYSTEM（系统）。
        这些都是在<io.h>中定义的宏，可以直接使用，而本身的意义其实是一个无符号整型（只不过这个整型应该是2的几次幂，从而保证只有一位为1，而其他位为0）。
        既然是位表示，那么当一个文件有多个属性时，它往往是通过位或的方式，来得到几个属性的综合。
        例如只读+隐藏+系统属性，应该为：_A_HIDDEN | _A_RDONLY | _A_SYSTEM 。


        time_t time_create：这里的time_t是一个变量类型（长整型？相当于long int?），用来存储时间的，我们暂时不用理它，
        只要知道，这个time_create变量是用来存储文件创建时间的就可以了。


        time_t time_access：文件最后一次被访问的时间。


        time_t time_write：文件最后一次被修改的时间。


        _fsize_t size：文件的大小。这里的_fsize_t应该可以相当于unsigned整型，表示文件的字节数。


        char name[_MAX_FNAME]：文件的文件名。这里的_MAX_FNAME是一个常量宏，它在<stdlib.h>头文件中被定义，表示的是文件名的最大长度。


        以此，我们可以推测出，struct _finddata_t ，大概的定义如下：


        struct _finddata_t
        {
             unsigned attrib;
             time_t time_create;
             time_t time_access;
             time_t time_write;
             _fsize_t size;
             char name[_MAX_FNAME];
        };


        前面也说了，这个结构体是用来存储文件信息的，那么如何把一个硬盘文件的文件信息“存到”这个结构体所表示的内存空间里去呢？
        这就要靠_findfirst、_findnext和_fineclose三个函数的搭配使用了。


        首先还是对这三个函数一一介绍一番吧……


        long _findfirst( char *filespec, struct _finddata_t *fileinfo )；


        返回值：如果查找成功的话，将返回一个long型的唯一的查找用的句柄（就是一个唯一编号）。这个句柄将在_findnext函数中被使用。若失败，则返回-1。


        参数：


        filespec：标明文件的字符串，可支持通配符。比如：*.c，则表示当前文件夹下的所有后缀为C的文件。


        fileinfo ：这里就是用来存放文件信息的结构体的指针。这个结构体必须在调用此函数前声明，不过不用初始化，只要分配了内存空间就可以了。
        函数成功后，函数会把找到的文件的信息放入这个结构体中。


        int _findnext( long handle, struct _finddata_t *fileinfo );


        返回值：若成功返回0，否则返回-1。


        参数：


        handle：即由_findfirst函数返回回来的句柄。


        fileinfo：文件信息结构体的指针。找到文件后，函数将该文件信息放入此结构体中。


       int _findclose( long handle );


        返回值：成功返回0，失败返回-1。


        参数：


        handle ：_findfirst函数返回回来的句柄。
