string类
    string实际上是模板具体化basic_string<char>的一个typedef， 同时省略了与内存管理相关的参数
    
    构造函数
    
    string::npos定义为字符的最大长度，通常为unsigned int的最大值
    
    输入
      C-风格字符串
        cin >> info;               //read a word
        cin.get(info, 100);        //read a line, leave \n in queue
        cin.getline(info, 100);    //read a line, discard \n
      string对象
        cin >> stuff;              //read a word
        getline(cin, stuff);       //read a line, discard \n
      可选参数，输入边界，默认为‘\n’
        cin.getling(info, 100, ':'); //read up to : ,discard :
        getline(stuff, ':');    //read up to : ,discard :
        
    size()&length
      
    find()
      
    capacity(): 返回当前分配给字符串的内存块大小
    reserve(): 请求内存块的最小长度
      
    c_str()：返回一个指向C-风格字符串的指针
    
    string类不是STL的组成部分，但它考虑到了STL，包含了begin(),end(), rbegin(),rend()等，因此可以使用STL接口
    
智能指针模板
    
    头文件memory
    
    auto_ptr
    unique_ptr
    shared_ptr
    
    智能指针过期，会自动调用析构函数，即使用new后，无需显式使用delete
    
    问题：多个指针指向同一个对象，引起多次删除同一内存
    方案：定义赋值运算值，使之执行深复制
         建立所有权概念，anto_ptr、unique_ptr（更严格）
         引用计数，shared_ptr
    
    多个指针指向同一对象：
        auto_ptr行为不确定
        unique_ptr编译警告
        应使用shared_ptr
        
    函数返回，优先选择unique_ptr
    
    auto_ptr使用的是delete，而unique_ptr使用的是delete[],后者可用于数组的变体
    
    
标准模板库（STL）
    STL是一种泛型编译
        面向对象编程关注的是编程的数据方面，而泛型编程关注的是算法，共同之处是抽象和可重用
        
    容器
        公用的基本方法
            size（）
            swap（）
            begin（）
            end（）
            find（）
            
        vector
            #include <vector>
            快速访问
            int n;
            cin >> n;
            vector<double> scores(n);
            
            push_back()
            erase（）
            insert（）
            for_each（）
            random_shuffle()
            sort（）
            可反转容器
            rbegin()
            rend()
        
        deque
            双端队列
            
        list
            快速插入和删除
            可反转
            void merge(list<T, Alloc>& x)
            void remove(const T & val)
            void sort()
            void splice(iterator pos, list<T, Alloc>x)
            void unique()
            remove()
            remove_if(bool)
            
        queue
            适配器类
            bool empty()const
            size_type size()const
            T& front()
            T& back()
            void push(const T& x)
            void pop()
            
        priority_queue
        stack
            适配器类
            bool empty()const
            size_type size()const
            T& top()
            void push(const T& x)
            void pop()
        
        forwar_list
            单向
            
        关联容器
        将值和键关联在一起，并使用键来查找值
        通常使用树来实现
            map
                值和键的类型不同
            multimap
                multimap<keytype, datatype, compare> //第三个参数可选
                first()
                second()
                count()
                lower_bound()
                upper_bound()
                equal_range()
            set
                值和键的类型相同
                键是唯一的
                set<string, less<string>> A;
                set_union(A.begin(), A.end(), B.begin(), B.end(), ostream_iterator<string, char> out(cout, " "));
                set_intersection()交集
                set_difference()
                lower_bound()
                upper_bound()
                
            multiset
                可能有多个值的键相同
                
            *//bitset
        无序关联容器
        基于哈希表
            unordered_map
            unordered_multimap
            unordered_set
            unordered_multiset
            
    基于范围的for循环是为用于SLT而设计的
        
    迭代器
    #include <iterator>
        广义指针
        
        功能要求：
            解除引用
            赋值
            比较
            遍历
        
        vector<double>::iterator pr;
        
        前缀版本operator++
        后缀版本operator++(int)
        
        类型：
            输入迭代器
            输出迭代器
            正向迭代器
            双向迭代器
            随机访问迭代器
        
        ostream_iterator<传入类型，输出类型> out(cout, " ");
        istream_iterator
        
        reserve_iterator
        rbegin()
        rend()
        
        insert_iterator<vector<int>> insert_iter(dice, dice.begint())
        back_insert_iterator<vector<int>> insert_iter(dice)
        front_insert_iterator...
        
        

        
    函数对象/函数符
       由使用参数分类：
         生成器
         一元函数
         二元函数
       bool 谓词 
       是可以以函数方式与（）结合使用的任意对象
       包括：函数名， 指向函数的指针和重载了（）运算符的类对象
       如： 类Linear 重载了（）:double operator()(double a){return a*x;}//x来自与构造函数中的数据成员
            则Linear f1;
              dounble y = f1(6.6);
              相当于 f1.operator()(6.6)
        
    
    算法
        #include <algorithm>
            非修改式序列操作
            修改式序列操作
            排序和相关操作
        #include <numeric>
            通用数字运算
            
   valarray<double> vad(10);
   sort(begin(vad), end(vad));
