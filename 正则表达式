#include <regex>  

std::regex_match
此接口与其它语言的使用有区别，这里适用于字符串与正则表达式的全匹配，也就是验证字符串是否符合正则的规范

std::regex_serch
此接口按照正则表达式在字符串中查找符合规范的字符串，不过每次调用只返回一个结果，若要返回多个匹配结果需反复调用

http://www.cnblogs.com/ldq2016/p/5528177.html

两个特殊的符号'^'和'$'。他们的作用是分别指出一个字符串的开始和结束。

其它还有'*'，'+'和'?'这三个符号，表示一个或一序列字符重复出现的次数。它们分别表示“没有或
更多”，“一次或更多”还有“没有或一次”。

你也可以使用范围，用大括号括起，用以表示重复次数的范围。
请注意，你必须指定范围的下限（如："{0,2}"而不是"{,2}"）。还有，你可能注意到了，'*'，'+'和
'?'相当于"{0,}"，"{1,}"和"{0,1}"。

还有一个'¦'，表示“或”操作：

'.'可以替代任何字符：

"[ab]"：表示一个字符串有一个"a"或"b"（相当于"a¦b"）；
"[a-d]"：表示一个字符串包含小写的'a'到'd'中的一个（相当于"a¦b¦c¦d"或者"[abcd]"）；
"^[a-zA-Z]"：表示一个以字母开头的字符串；
"[0-9]%"：表示一个百分号前有一位的数字；
",[a-zA-Z0-9]$"：表示一个字符串以一个逗号后面跟着一个字母或数字结束。

你也可以在方括号里用'^'表示不希望出现的字符，'^'应在方括号里的第一位。（如："%[^a-zA-Z]%"表
示两个百分号中不应该出现字母）。

为了逐字表达，你必须在"^.$()¦*+?{\"这些字符前加上转移字符'\'。

请注意在方括号中，不需要转义字符。

/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。

\d：用于匹配从0到9的数字；
