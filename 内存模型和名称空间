一个程序可以这样组织：
  头文件：包含结构声明和使用这些结构的函数的原型。（函数原型、使用#define或const定义的符号常量、结构声明、类声明、模板声明、内联函数）
  源代码文件：包含与结构相关的函数的代码。
  源代码文件：包含调用与结构相关的函数的代码。
 
不要将函数定义或变量声明放在头文件中

头文件：
  <>:编译器将在存储标准头文件的主机系统的文件系统中查找
  "":首先查找当前的工作目录或源代码目录，若没找到，再查找标准位置
  #ifndef ...
  #define ...
  ...
  #endif//防止头文件被同一个文件多次包含
  
 存储持续性：自动，静态，线程，动态
 
 寄存器变量：
 register int count_fast;//提高访问变量的速度
 
 引用声明：
 extern int blem;
 
 static int error = 5;
 //置于文件头，为内部链接性
 
 const全局变量的链接性为内部，这点与static相同
 
 cv-限定符
 const
 volatile//告诉编译器不要进行如下优化： 将多次使用的变量缓存到寄存器中
 
 mutable//指出即使结构（或类）变量为const，其某个成员也可被修改
 stuct data
 {
     char namep[30];
     matable int accesses;
 };
 
 定位new运算符
 首先要包含头文件new
 
 名称空间问题：
  同时使用不同库中相同名称的变量，造成冲突
  声明区域declaration region
  潜在作用域patential scope
  解决办法：
    传统：定义了一种名称名称空间层次，每个声明区域都可以声明名称，且相互独立，如一个函数的局部变量不会和函数外声明的局部变量发生冲突。
    新的名称空间:通过定义一种新的声明区域来创建命名的名称空间，各空间相互独立。
                新的关键字namespace
                e.g.namespace Jack
                    {
                      double a;
                      void fetch();
                      int ...
                      struct ...
                    }
                名称空间可以是全局的，也可以位于另一个名称空间中，但不能位于代码块中，默认链接性为外部
                名称空间是开放的，可以把名称加入到已有的名称空间中
                作用域解析运算符：：
                e.g.Jack::a = 1;
                未限定名称&限定名称
    using声明：使特定的标识符可用using Jack::fetch();
    using编译指令：使整个名称空间可用using namespace Jack;
    简化嵌套名称空间
      namespace MEF = myth::element::fire;
      using MEF::flame;
    未命名的名称空间  
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
