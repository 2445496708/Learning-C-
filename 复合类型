存储信息必须跟踪的3种基本属性
          存在哪
          值为多少
          什么类型

int arr[500]={1};//第一个元素初始化为1，其他自动初始化为0

char dog[]={'a','b','c'};//not a string
char cat[]={'a','b','\0'};//a string

cin 读入一个单词
cin.getline（） 读入一行字符
cin.get() 行末的换行符不读取且不丢弃，若连续两次调用get（），则第二个输入的开头为换行符；
          解决办法cin.get(...).get()或中间加个cin.get（）

#include<cstring>
          strcpy()
          strcat()
          strlen()
          char charr[20];cin.getline(charr,20);//indicate maximum length

#include<string>,使用string类
          不能讲一个数组赋值给另一个数组，但可以将一个string对象赋给另一个string对象
          可用运算符+将两个string对象拼接起来
          成员函数size（）
          string str;getline(cin,str);//cin now an argument;no length specifier;getline不是类方法
          
原始字符串
 界定符:"(...)","+(...)+"
 前缀标识：R

结构
          struct structname {};
          支持列表初始化
          同类型可直接赋值
          可传入函数或作为函数返回值
          可创建结构数组
          
union共同体
          能存储不同数据类型，但只能同时存储其中的一种类型
          常用于节省内存

enum枚举
          可以枚举来定义switch语句中使用的符号常量

指针
          *运算符：间接值或解除引用
          一定要在对指针应用解除引用运算符之前，将指针初始化为一个确定的适当的地址
          为一个数据对象获取并指定分配内存：typename * pointer_name = new typename;
          delete 释放内存,不要释放不是new分配的内存；不要释放同一个内存两次
          动态数组 int * p = new int[10]; delete [] p;
          将指针变量加1后，其增加的值为指向的类型占用的字节数
          指针&数组比较：
                  使用方括号数组表示法等同于对指针解除引用
                  声明了一个指针变量后，应该用new进行内存分配，才能进行写入
                  数组是左值，但并不是可修改的左值，因此你也不能直接把数组名放在等号左边进行赋值。&数组，返回指向数组地址的指针
                  数组作为右值时是一个指针
                  不能对数组名进行直接复制与比较，而应该用strcpy()、strcmp()
自动存储auto 栈
静态存储static
动态存储 free store或heap

auto ppb=arp；

#include<vector>动态
          vector<typename> vt(n_elem);其中n_elem可以是整型常量，也可以是整型变量

#include<array>静态
          array<typenaem,n_elem> arr;
          





